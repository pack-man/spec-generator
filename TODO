- Packman package:
 - create packman user, sudoer for docker command - DONE
 - create these dirs under ~packman/rpmbuild: - DONE
   BUILD BUILDROOT RPMS SRPMS - DONE
 - Packman scripts go to ~packman/bin - DONE
 - configuration goes to ~packman/etc - DONE
 - tmp stuff goes to ~packman/tmp - DONE
 - packman user .bashrc should have a nice PS1 and also PATH that includes /home/packman/bin and a few other useful aliases - IN PROGRESS
 - bash compeltion for git, yum, aptitude


 - Packman RPM package - IN PROGRESS
	- depend on lxc-docker
 - enable EPEL and RPMForge repos - DONE
	- set priority so they are the lowest one and the official repo is highest

 deb package:
 - depend on build-essential debhelper apt-file dh-make vim-nox wget unzip git lsb-release apt-transport-https ca-certificates lxc-docker yasm devscripts
 - enable extra repos
   deb https://get.docker.com/ubuntu docker main

- disable docker iptables:
	mkdir /etc/systemd/system/docker.service.d
	cat << EOF > /etc/systemd/system/docker.service.d/noiptables.conf
	[Service]
	ExecStart=
	ExecStart=/usr/bin/docker daemon -H fd:// --iptables=false
	EOF
	systemctl daemon-reload

- Setup scripts and response files for commonly used packages [MySQL comes to mind]

- Build generic templating mechanism based on dpkg's template mechanism only it would also allow setting a callback function for verifying inputs.
  - will support TUI and CLI

Things to think of:
 - if the package provides a daemon, need an init script/systemd template to start from



- if we're generating a new package:
	- User inputs - DONE
		- get env matrix - i.e, on what distros this package should be built
		- get source URL
		- get version
		- write info to RC file
		- start a docker container of relevant distro



- analyze source for build and runtime dependencies
	- RPM - DONE
	- deb
- if deps are from unofficial repos, need to appear in the report
- generate spec 
      - description
      - source URL
      - license - try to auto detect looking for files named license/i or copyright/i
	https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing
      - arch - try to auto detect whether noarch/indep according to source type. For example, if the source is PHP||Perl||Python||many others only, then it is indep.
      - changelog
	- for deb we have debchange and dh-make already takes care of the initial import
	- need a parallel for RPM - DONE
      - auto detect config files
      - auto detect init scripts
      - dev package
      - maintainer 
	- check MAIL and DEBEMAIL ENV vars for email
	- check DEBFULLNAME and MAINTAINER_NAME for name
      - different profiles, different spec templates:
	- C/C++ one
		- check for qt or cmake related build files
	- PHP web apps
		- need an Apache config, potentially other common webservers
	- PHP extensions
	- Java Maven template
	- Java Ant template
	- Ruby project template
	- is this package a daemon?
		- need an init template or systemd config
		- create user for daemon
		- depend on chkconfig
			%post
			if [ $1 -eq 1 ]; then
			    /sbin/chkconfig --add %{name}
			fi
			%preun
			if [ $1 -eq 0 ]; then
			    /sbin/service %{name} stop >/dev/null 2>&1
			    /sbin/chkconfig --del %{name}
			fi


- source prep:
- remove {.git,.csv,.svn} files - DONE
- set proper permissions on files, i.e: remove redundant/add exec bit where needed - DONE
- deb only: repo name to place in changelog file

API:
- Read this:
	http://www.gajotres.net/best-available-php-restful-micro-frameworks/
	https://docs.phalconphp.com
- Needed APIs: 
	- create new package
	- create new build job
	- update build job status
	- query build job queue
	- push notification related to the job, for example:
		- that additional repos were needed for deps
		- that the %configure macro did not work
		
- SaaS demo:
	- Form with the same inputs as packman-new-package
	- Upon submit:
		- auto create repo based on PACKMAN_SPACE
			set +e
			curl -s -I -f https://github.com/pack-man/$PACKMAN_SPACE
			if [ $? -ne 0 ];then
				curl -X POST -H "Authorization: token $TOKEN"  --data '{"name":"$PACKMAN_SPACE","has_issues":"true","has_downloads":"true"}' https://api.github.com/orgs/pack-man/repos
			fi
			set -e
		- ssh-keygen -t rsa -N "" -f ~/.ssh/$PACKMAN_SPACE
		- add key to github
			https://developer.github.com/v3/repos/keys/
			- curl -X POST -H "Authorization: token $TOKEN" --data '{"title":"test-key","key":""}' https://api.github.com/repos/pack-man/play-ground/keys
		- generate the RC file
		- commit and push to repo
		- need to implement a job queue that makes sure no more than say 4 jobs run in parallel since our demo box does not have many resources
		- call bin/packman-start-dockers
		- tail log via web I/F
		- summary
			- display on page
			- send by mail
			- location of generated spec
			- location of RPM and src.rpm along with repo instructions
			- rpmlint/lintian output
			- run log [also needs to be attached to mail]


- finish deb spec gen
- add license prompting to new-package
- add question about daemon or not, if daemon use daemon-skel.spec - IN PROGRESS 
- test some web applications
	- Drupal
	- Wordpress
- add logging
- create DB schema - IN PROGRESS [spec-generator/schema.sql]
- go over all packman package lint issues
- don't package /etc/packman/packman-packages-meta/packman
- 

- build RPM debug packages
- how to do an auto git pull without having to confirm it
- add jo RPM to packman repo
- make repo.packman.io listen on 80 and change docker files accordingly
