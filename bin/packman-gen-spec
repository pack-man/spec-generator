#!/bin/bash - 
#===============================================================================
#          FILE: packman-gen-spec
#         USAGE: ./packman-gen-spec 
#   DESCRIPTION: generate spec files based on user input as saved to $PACKAGE_RC,
#		 then build the package and commit the spec
#       OPTIONS: /path/to/package.rc as arg 1
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Jess Portnoy (), <jess@packman.io>
#  ORGANIZATION: Packman.
#       CREATED: 02/20/2016 10:48:56 PM GMT
#      REVISION:  ---
#===============================================================================

#set -o nounset                              # Treat unset variables as an error
DIRNAME=`dirname $0`
NEEDED_FILES="$DIRNAME/packman-functions.rc"
for NEEDED_FILE in $NEEDED_FILES;do
        if [ ! -r $NEEDED_FILE ];then
                printf "Missing $NEEDED_FILE. Something is wrong with your ENV. Exiting."
                exit 2
        fi
        . $NEEDED_FILE
done

if [ ! -r "$1" ];then
        printf "Usage: $0 </path/to/package.rc>"
        exit 1
fi
PACKAGE_RC=$1
. $PACKAGE_RC


env_packaging_format
PACKAGE_FORMAT=$?

# TODO: we can certainly put some of this into functions in packman-functions.rc

if [ $PACKAGE_FORMAT -eq $RPM ];then
        cp /etc/packman/spec-skelatons/rpm/skel.spec ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
        replace_rpm_spec_tokens $PACKAGE_RC ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
        packman-rpmchange ~/rpmbuild/SPECS/$PACKAGE_NAME.spec $PACKAGE_VERSION 1 "Auto generated by Packman"

        rpmbuild -ba ~/rpmbuild/SPECS/$PACKAGE_NAME.spec 2>&1| tee /tmp/$PACKAGE_NAME.rpmbuild.log 
        if grep -q "error: Bad exit status from .* (%build)" /tmp/$PACKAGE_NAME.rpmbuild.log;then
                # using the standard %configure macro does not work, lets replace with a simple ./configure --prefix=/usr
                printf "$PACKAGE_NAME's configure script does not support the default %configure macro, going with ./configure --prefix=/usr/$PACKAGE_NAME" >> /tmp/$PACKAGE_NAME_build.log
                sed -i "s@^%configure@./configure --prefix=/usr/$PACKAGE_NAME@" ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
                # and try again:
                rpmbuild -ba ~/rpmbuild/SPECS/$PACKAGE_NAME.spec 2>&1 | tee /tmp/$PACKAGE_NAME.rpmbuild.log  
        fi

        # we want to see if we have missing files and add them to the spec
	rpmbuild -bl ~/rpmbuild/SPECS/$PACKAGE_NAME.spec 2>&1|grep -A1000 "^\s*Installed (but unpackaged) file(s) found:"|sed -e '1,1d' -e "s/\s*//g" >/tmp/${PACKAGE_NAME}.missing
	if [ -s /tmp/${PACKAGE_NAME}.missing ];then
		# here is where we should mark config files checking for .*conf, *.ini, *.yml, etc
		sed -e 's@\(.*\.conf.*\|.*/conf/.*\)@%config(noreplace) \1@g' -e 's@\(.*\.ini$\)@%config(noreplace) \1@g' -e 's@\(.*\.yml$\)@%config(noreplace) \1@g' -i /tmp/${PACKAGE_NAME}.missing
		MISSING=`cat /tmp/${PACKAGE_NAME}.missing|sort -u |sed ':a;N;$!ba;s/\n/\\\\\n/g'`
		# header and archive files should go to dev package %files section
		sed -i "s^\(%defattr(-,root,root,-)\)^\1\n$MISSING^g" ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
		rpmbuild -ba ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
	fi
        sudo yum remove $PACKAGE_NAME -y
        sudo rpm -Uhv $PACKMAN_HOME/rpmbuild/RPMS/`uname -m`/$PACKAGE_NAME-$PACKAGE_VERSION-*.`uname -m`.rpm
        rm -f /tmp/$PACKAGE_NAME.dep_packages
        FILES=`rpm -ql $PACKAGE_NAME|grep "/bin\|/sbin\|/lib.*\.a\|/lib.*\.so*"|xargs`
        for FILE in $FILES;do
                for i in `ldd $FILE 2>/dev/null|awk -F " " '{print $3}'`;do
                        rpm -qf $i --queryformat %{name}"\n" 2>/dev/null >> /tmp/$PACKAGE_NAME.dep_packages
                done
        done
        sort -u /tmp/$PACKAGE_NAME.dep_packages > /tmp/$PACKAGE_NAME.dep_packages.1
        PACKAGE_REQUIRES=`cat /tmp/$PACKAGE_NAME.dep_packages.1|sed '/^glibc$/d'|sed ':a;N;$!ba;s/\n/, /g'`
        sed -i "s/#Requires: @@PACKAGE_REQUIRES@@/Requires: $PACKAGE_REQUIRES/g" ~/rpmbuild/SPECS/$PACKAGE_NAME.spec

        # lets see what build deps we can get from this:
        PACKAGE_BUILD_MAY_REQUIRE=`cat /tmp/$PACKAGE_NAME.dep_packages.1|sed '/^glibc$/d'|sed 's@$@-devel@g'| sed ':a;N;$!ba;s/\n/ /g'`
        PACKAGE_BUILD_REQUIRES=`for DEV_PACKAGE in $PACKAGE_BUILD_MAY_REQUIRE  ;do if rpm -q $DEV_PACKAGE > /dev/null 2>&1;then echo -n "$DEV_PACKAGE ";fi;done`
        sed -i "s/#BuildRequires: @@BUILD_REQUIRES@@/BuildRequires: $PACKAGE_BUILD_REQUIRES/g" ~/rpmbuild/SPECS/$PACKAGE_NAME.spec


        # dev package

        # if we got arch dep error:
        # rpmbuild -ba /jam-x.spec 2>&1|grep "Arch dependent binaries in noarch package"
        # remove BuildArch: noarch from spec, we were wrong in our detection

elif [ $PACKAGE_FORMAT -eq $DEB ];then
	# just to make BASH parse this whilest in progress and commented
	printf "deb"
	# for no arch, we want TYPE to be -i, for single binary, -s
	# TODO: we may want to create a custom dh_make to support additional license types, AGPLv3 for instance
	# DEBFULLNAME="$MAINTAINER_NAME" dh_make -c $PACKAGE_LICENSE -e "$MAINTAINER_EMAIL"  -f $PACKMAN_HOME/src/$PACKAGE_NAME-$PACKAGE_VERSION.tar.gz $TYPE -y
fi

BRANCH=$PACKAGE_NAME-$PACKAGE_VERSION 
cd /etc/packman/packman-packages-meta/$PACKMAN_SPACE
git pull origin ${BRANCH}
git checkout ${BRANCH}
if [ $PACKAGE_FORMAT = $RPM ];then
        mkdir -p rpm/SPECS
        cp ~/rpmbuild/SPECS/$PACKAGE_NAME.spec rpm/SPECS
        git add rpm/*
fi
git commit -a -m "Commited by `basename $0`"
git push origin $BRANCH
# need to copy the package to the repo, sign it and update metadata

