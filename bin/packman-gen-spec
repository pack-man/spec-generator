#!/bin/bash - 
#===============================================================================
#          FILE: packman-gen-spec
#         USAGE: ./packman-gen-spec 
#   DESCRIPTION: Will accept a source in the form of a URL or local FS path and generate spec files 
#       OPTIONS: source path
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Jess Portnoy (), <jess@packman.io>
#  ORGANIZATION: Packman.
#       CREATED: 02/20/2016 10:48:56 PM GMT
#      REVISION:  ---
#===============================================================================

#set -o nounset                              # Treat unset variables as an error
DIRNAME=`dirname $0`
if [ ! -r /home/packman/etc/packman.rc ];then
        echo "Missing /home/packman/etc/packman.rc. Something is wrong with your ENV. Exiting."
        exit 1
fi
. /home/packman/etc/packman.rc
NEEDED_FILES="$PACKMAN_HOME/etc/package.rc $DIRNAME/packman-functions.rc"
for NEEDED_FILE in $NEEDED_FILES;do
        if [ ! -r $NEEDED_FILE ];then
                echo "Missing $NEEDED_FILE. Something is wrong with your ENV. Exiting."
                exit 2
        fi
        . $NEEDED_FILE
done

if [ ! -r "$1" ];then
        echo "Usage: $0 </path/to/package.rc>"
        exit 1
fi
PACKAGE_RC=$1
#
. $PACKAGE_RC
# if this is an RPM
env_packaging_format
if [ $? -eq 2 ];then
        cp $PACKMAN_HOME/etc/spec-skelatons/rpm/skel.spec ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
        replace_rpm_spec_tokens $PACKAGE_RC ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
        # if rpmbuild -ba failed, we want to see if we have missing files and add them to the spec
        # find deps by checking included files



        rpmbuild -ba ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
        if [ $? -ne 0 ];then
                rpmbuild -bl ~/rpmbuild/SPECS/$PACKAGE_NAME.spec 2>&1|grep -A1000 "^\s*Installed (but unpackaged) file(s) found:"|sed -e '1,1d' -e "s/\s*//g" >/tmp/${PACKAGE_NAME}.missing
                MISSING=`cat /tmp/${PACKAGE_NAME}.missing|sed ':a;N;$!ba;s/\n/\\\\\n/g'`
                # here is where we should mark config files checking for .*conf, *.ini, *.yml, etc
		# header and archive files should go to dev package %files section
                sed -i "s^\(%defattr(-,root,root,-)\)^\1\n$MISSING^g" ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
                rpmbuild -ba ~/rpmbuild/SPECS/$PACKAGE_NAME.spec
        fi

        sudo rpm -Uhv $PACKMAN_HOME/rpmbuild/RPMS/`uname -m`/$PACKAGE_NAME-$PACKAGE_VERSION-*.`uname -m`.rpm
        rm -f /tmp/$PACKAGE_NAME.depends
        FILES=`rpm -ql $PACKAGE_NAME|grep "/bin\|/sbin\|/lib.*\.a\|/lib.*\.so*"|xargs`
        for FILE in $FILES;do
                for i in `ldd $FILE 2>/dev/null|awk -F " " '{print $3}'`;do
                        rpm -qf $i --queryformat %{name}"\n" 2>/dev/null >> /tmp/$PACKAGE_NAME.depends
                done
        done
        sort -u /tmp/$PACKAGE_NAME.depends > /tmp/$PACKAGE_NAME.depends.1
        PACKAGE_REQUIRES=`cat /tmp/$PACKAGE_NAME.depends.1|sed ':a;N;$!ba;s/\n/, /g'`
        sed -i "s/#Requires: @@PACKAGE_REQUIRES@@/Requires: $PACKAGE_REQUIRES/g" ~/rpmbuild/SPECS/$PACKAGE_NAME.spec

	# dev package

        # if we got arch dep error:
        # rpmbuild -ba /jam-x.spec 2>&1|grep "Arch dependent binaries in noarch package"
        # remove BuildArch: noarch from spec, we were wrong in our detection
	BRANCH=$PACKAGE_NAME-$PACKAGE_VERSION 
	cd $PACKMAN_HOME/tmp/build/$PACKMAN_SPACE
	git pull origin ${BRANCH}
	git checkout ${BRANCH}
	mkdir -p rpm/SPECS
	cp ~/rpmbuild/SPECS/$PACKAGE_NAME.spec rpm/SPECS
	git add rpm/*
	git commit -a -m "Commited by `basename $0`"
	git push origin $BRANCH

fi

# need to commit the spec once done
# need to copy the RPM to the repo, sign it and createrepo -u

#is_arch_indep()
#{
#
#}

#detect_deps()
#{
#
#}
