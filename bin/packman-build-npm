#!/bin/bash -e 
#===============================================================================
#          FILE: packman-build-package
#         USAGE: ./packman-build-package
#   DESCRIPTION: checkout the metadata configuration for the package from the repo
#                and prepare the git ENV 
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Jess Portnoy (), <jess@packman.io>
#  ORGANIZATION: Packman.
#       CREATED: 03/11/2016 12:47:11 PM GMT
#      REVISION:  ---
#===============================================================================

#set -o nounset                              # Treat unset variables as an error

DIRNAME=`dirname $0`
NEEDED_FILES="$DIRNAME/packman-functions.rc"
for NEEDED_FILE in $NEEDED_FILES;do
        if [ ! -r $NEEDED_FILE ];then
                printf "Missing $NEEDED_FILE. Something is wrong with your ENV. Exiting."
                exit 2
        fi
        . $NEEDED_FILE
done
if [ $# -lt 5 ];then
        printf "Usage: $0 <path/to/package.rc> <api id> <api key> <job id> <package id>\n"
        exit 1
fi

trap 'trap_handler ${LINENO} $?' ERR
PACKAGE_RC=$1
if [ ! -r "$PACKAGE_RC" ];then
	printf "Could not read $PACKAGE_RC. Exiting."
	exit 3
fi
. $PACKAGE_RC
PACKMAN_API_ID=$2
PACKMAN_API_KEY=$3
JOB_ID=$4
PACKAGE_ID=$5
export PACKMAN_API_ID PACKMAN_API_KEY JOB_ID PACKAGE_ID

update_job_api $JOB_ID $JOB_IN_PROGRESS
update_package_status_api $PACKAGE_ID $PACKAGE_BUILD_IN_PROGRESS
BRANCH=$PACKAGE_NAME-$PACKAGE_VERSION
cd /etc/packman/packman-packages-meta/$PACKMAN_SPACE/$BRANCH
if [ -r package.json ];then
        cp package.json package.json.orig
else
	# we need to generate one
	new_event_api $EVENT_INFO $JOB_ID "Generating package.json..."
	sed "s#@@PACKAGE_NAME@@#$PACKAGE_NAME#g" /etc/packman/packman-packages-meta/spec_skels/npm.skel > package.json
	sed -i "s#@@PACKAGE_VERSION@@#$PACKAGE_VERSION#g"  package.json
	DESCRIPTION=`get_package_description_api $PACKAGE_ID|sed "s^\"^'^g"`
	sed -i "s^@@PACKAGE_DESCRIPTION@@^$DESCRIPTION^g"  package.json
	sed -i "s^@@PACKMAN_REPO@@^https://github.com/packdaddy/$PACKMAN_SPACE^g"  package.json
	sed -i "s^@@PROJECT_URL@@^$PROJECT_URL^g"  package.json
	sed -i "s^@@MAINTAINER_NAME@@^$MAINTAINER_NAME^g"  package.json
	sed -i "s^@@MAINTAINER_EMAIL@@^$MAINTAINER_EMAIL^g"  package.json

	if [ -r "${PACKAGE_NAME}.js" ];then
		MAIN_SCRIPT="${PACKAGE_NAME}.js"
	elif [ -r "lib/${PACKAGE_NAME}.js" ];then
		MAIN_SCRIPT="lib/${PACKAGE_NAME}.js"
	elif [ -r "server.js" ];then
		MAIN_SCRIPT=server.js
	elif [ -r "index.js" ];then
		MAIN_SCRIPT=index.js
	elif [ -r "lib/index.js" ];then
		MAIN_SCRIPT=index.js
	else
		new_event_api $EVENT_FATAL $JOB_ID "Couldn't detect the main script to run. package.json saved to https://github.com/packdaddy/$PACKMAN_SPACE on branch $BRANCH. Replace @@MAIN_SCRIPT@@ with an actual script."
	fi
	sed -i "s^@@MAIN_SCRIPT@@^$MAIN_SCRIPT^g"  package.json
	new_event_api $EVENT_INFO $JOB_ID "Detected $MAIN_SCRIPT as the main script to run..."
	NEW_SPEC_GENERATED=1
	
fi
DEPS_FILE=/tmp/${PACKAGE_NAME}_${PACKAGE_VERSION}.deps
find . -type f -name "*.js"  ! -name "*.ejs.js" -exec dependency-check . --entry {} 2>&1 \; |grep "Fail! Dependencies not listed in package.json: "|sed 's@Fail! Dependencies not listed in package.json:@@g'|tr "," "\n" >${DEPS_FILE}.tmp
sort -u ${DEPS_FILE}.tmp > ${DEPS_FILE}

if [ -n "$NEW_SPEC_GENERATED" ];then
	export PACKMAN_API_ID PACKMAN_API_KEY PACKMAN_API_ENDPOINT PACKAGE_ID
	/usr/bin/packman-gen-npm-deps.php package.json ${DEPS_FILE}
else
	# if the code uses bower in scripts, do not show it as unused.
	if grep "bower \|#!.*bower" * -r -q ;then 
		EXTRA_OPTS="--ignore-module bower"
	else
		EXTRA_OPTS=""
	fi
	UNUSED_MODULES=`dependency-check . --unused $EXTRA_OPTS 2>&1|sed 's@Fail! @@g'`
	echo $UNUSED_MODULES|sed 's@Modules in package.json not used in code: @@g'|tr "," "\n" >/tmp/${PACKAGE_NAME}_${PACKAGE_VERSION}_unused.deps
	new_event_api $EVENT_WARNING $JOB_ID "$UNUSED_MODULES" 
	/usr/bin/packman-gen-npm-update.php package.json /tmp/${PACKAGE_NAME}_${PACKAGE_VERSION}_unused.deps $PACKMAN_API_ID $PACKMAN_API_KEY $PACKMAN_API_ENDPOINT $PACKAGE_ID
	npm-check-updates  -u

fi
npm version ${PACKAGE_VERSION}
git add package.json*
git commit package.json* -m "New package.json by `basename $0`" && git push origin $BRANCH
# ready to build
new_event_api $EVENT_INFO $JOB_ID "Building ${PACKAGE_NAME} version ${PACKAGE_VERSION}. This may take a while..."
#printf "Building ${PACKAGE_NAME} version ${PACKAGE_VERSION}..\n"
set +e
sudo npm install -g --dev
npm publish
RC=$?
if [ $RC -eq 0 ];then
	new_event_api $EVENT_INFO $JOB_ID "Successfully published ${PACKAGE_NAME} version ${PACKAGE_VERSION} to http://packdaddy.io:4873"
else
	new_event_api $EVENT_FATAL $JOB_ID "Failed to build ${PACKAGE_NAME} version ${PACKAGE_VERSION}"
	
fi
exit $RC
	
